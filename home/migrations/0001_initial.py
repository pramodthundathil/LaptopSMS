# Generated by Django 5.0.6 on 2025-07-22 06:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('date_added', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customerName', models.CharField(max_length=100)),
                ('customerEmail', models.EmailField(max_length=254)),
                ('customerMobNo', models.BigIntegerField()),
                ('customerAddress', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory_code', models.CharField(editable=False, max_length=8, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('brand_name', models.CharField(max_length=100)),
                ('base_product', models.CharField(choices=[('Laptop', 'Laptop'), ('Desktop', 'Desktop'), ('Monitor Part', 'Monitor Part'), ('Keyboard', 'Keyboard'), ('Motherboard', 'Motherboard'), ('RAM', 'RAM'), ('Hard Disk', 'Hard Disk'), ('SSD', 'SSD'), ('Battery', 'Battery'), ('Charger', 'Charger'), ('Screen', 'Screen'), ('Mouse', 'Mouse'), ('Printer', 'Printer'), ('Other', 'Other')], max_length=100)),
                ('value', models.CharField(blank=True, help_text='Values like 16Gb, 500SSD', max_length=100, null=True)),
                ('rate_of_purchase', models.FloatField(blank=True, null=True)),
                ('stock', models.IntegerField()),
                ('date_added', models.DateField(auto_now_add=True)),
                ('date_created', models.DateField(auto_now=True)),
                ('price_before_tax', models.FloatField(blank=True, default=0, null=True)),
                ('tax_amount', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Revenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('daily_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('monthly_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_name', models.CharField(max_length=20)),
                ('tax_percentage', models.FloatField()),
                ('date_added', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('gst_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.MinLengthValidator(15), django.core.validators.MaxLengthValidator(15)])),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('pincode', models.CharField(blank=True, max_length=10, null=True)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('supply_product', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('role', models.CharField(choices=[('user', 'user'), ('account', 'account'), ('admin', 'admin')], default='user', max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='ProductInward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serialNo', models.CharField(max_length=100)),
                ('brand', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('problem', models.TextField()),
                ('remark', models.TextField()),
                ('inwardDate', models.DateTimeField(auto_now_add=True)),
                ('commitmentDate', models.DateField()),
                ('productStatus', models.CharField(max_length=30)),
                ('productChecked', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_inward', to='home.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_type', models.CharField(choices=[('Credit', 'Credit'), ('Cash', 'Cash')], max_length=20)),
                ('bill_date', models.DateTimeField(auto_now_add=True)),
                ('payment_terms', models.CharField(blank=True, help_text='Number of days, Credit Period', max_length=255, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('place_of_supply', models.CharField(blank=True, max_length=100, null=True)),
                ('purchase_bill_number', models.CharField(blank=True, max_length=255, null=True)),
                ('purchase_order_number', models.CharField(blank=True, max_length=20, null=True)),
                ('purchase_order_date', models.DateField(blank=True, null=True)),
                ('quantity', models.FloatField(blank=True, default=1, null=True)),
                ('purchase_price', models.FloatField(blank=True, null=True)),
                ('discount', models.FloatField(blank=True, default=0, help_text='in %', null=True)),
                ('unit', models.CharField(choices=[('g', 'gram'), ('kg', 'kilograms')], default='kg', max_length=255)),
                ('tax', models.FloatField(blank=True, null=True)),
                ('amount', models.FloatField(default=0)),
                ('paid_amount', models.FloatField(default=0)),
                ('balance_amount', models.FloatField(default=0)),
                ('payment_status', models.CharField(choices=[('UNPAID', 'UNPAID'), ('PAID', 'PAID'), ('PARTIALLY', 'PARTIALLY')], max_length=20)),
                ('shipping_cost', models.FloatField(blank=True, null=True)),
                ('received_date', models.DateField(blank=True, null=True)),
                ('purchase_confirmation', models.BooleanField(default=False)),
                ('purchase_item', models.ManyToManyField(to='home.inventory')),
                ('supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_supply', to='home.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(default=0)),
                ('unit_price', models.FloatField(default=0)),
                ('discount', models.FloatField(default=0)),
                ('total_price', models.FloatField(editable=False)),
                ('is_inventory_updated', models.BooleanField(default=False)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventors_purchase', to='home.inventory')),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_bill', to='home.purchase')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_id', models.CharField(editable=False, max_length=7, unique=True)),
                ('component', models.CharField(max_length=100, null=True)),
                ('serviceRemark', models.CharField(blank=True, max_length=100, null=True)),
                ('serviceStatus', models.CharField(blank=True, max_length=30, null=True)),
                ('serviceCost', models.FloatField(default=0)),
                ('serviceDate', models.DateField(auto_now=True)),
                ('component_inventory', models.ManyToManyField(to='home.inventory')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service', to='home.productinward')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.service')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empName', models.CharField(max_length=100)),
                ('empEmail', models.EmailField(max_length=254)),
                ('empMobNo', models.BigIntegerField()),
                ('empDOB', models.DateField()),
                ('salary', models.FloatField()),
                ('is_active', models.BooleanField(default=True)),
                ('position', models.CharField(choices=[('Laptop Technician', 'Laptop Technician'), ('Computer Technician', 'Computer Technician'), ('Chip-level Technician', 'Chip-level Technician'), ('Manager', 'Manager'), ('HR', 'HR'), ('Other Staff', 'Other Staff')], max_length=30)),
                ('empTerms', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='serviceTechnician',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='serviceTechnician', to='home.team'),
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deliveryDate', models.DateTimeField(auto_now_add=True)),
                ('customerSatisfaction', models.CharField(blank=True, choices=[('Satisfied', 'Satisfied'), ('Neutral', 'Neutral'), ('Not Satisfied', 'Not Satisfied')], max_length=20, null=True)),
                ('deliveredOnTime', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, null=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Customer', to='home.customer')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product', to='home.productinward')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service', to='home.service')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team', to='home.team')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Bank Transfer', 'Bank Transfer'), ('Cheque', 'Cheque'), ('UPI', 'UPI'), ('Credit Card', 'Credit Card'), ('Debit Card', 'Debit Card')], max_length=20)),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.customer')),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to='home.purchase')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_history', to='home.vendor')),
            ],
            options={
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
    ]
